{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","data","setData","addDays","Date","date","setDate","counter","setCounter","useEffect","a","Promise","all","axios","get","format","responseUSD","responseEUR","dataNew","concat","convertRates","grouped","_","groupBy","Object","entries","key","value","row","time","item","keys","USD","EUR","fetchData","rates","base","RUB","timer","setInterval","clearInterval","className","width","height","margin","top","bottom","left","strokeDasharray","dataKey","domain","type","stroke","dot","isAnimationActive","undefined","map","i","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mXAwIeA,EAxHH,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACTC,EADS,KACHC,EADG,OAEQF,mBAASG,YAAQ,IAAIC,MAAS,KAFtC,mBAETC,EAFS,KAEHC,EAFG,OAGcN,mBAAS,IAHvB,mBAGTO,EAHS,KAGAC,EAHA,KAKhBC,qBAAU,YACO,uCAAG,wDAAAC,EAAA,sEACyBC,QAAQC,IAAI,CACnDC,IAAMC,IAAN,0CACqCC,YACjCV,EACA,cAHJ,0BAMAQ,IAAMC,IAAN,0CACqCC,YACjCV,EACA,cAHJ,4BARc,OAsBhB,IAtBgB,4BACTW,EADS,KACIC,EADJ,KAgBVC,EAAU,GAAGC,OACjBC,EAAaJ,EAAYf,MACzBmB,EAAaH,EAAYhB,OAGrBoB,EAAUC,IAAEC,QAAQL,EAAS,QACnC,MAA2BM,OAAOC,QAAQJ,GAA1C,eAAoD,CAAC,EAAD,oBAAxCK,EAAwC,KAAnCC,EAAmC,KAC5CC,EAAM,CAAEC,KAAMH,GAD8B,cAE/BC,GAF+B,IAElD,2BAAWG,EAAe,QACK,QAAzBN,OAAOO,KAAKD,GAAM,KACpBF,EAAIJ,OAAOO,KAAKD,GAAM,IAAMA,EAAKE,KAEN,QAAzBR,OAAOO,KAAKD,GAAM,KACpBF,EAAIJ,OAAOO,KAAKD,GAAM,IAAMA,EAAKG,KAPa,8BAUlD/B,EAAQ,GAAD,mBAAKD,GAAL,CAAW2B,KAhCJ,2CAAH,qDAmCfM,KACC,CAAC7B,IAEJ,IAAMe,EAAe,SAACe,GACpB,OAAQA,EAAMC,MACZ,IAAK,MACH,MAAO,CACLP,KAAMd,YAAO,IAAIX,KAAK+B,EAAK,MAAW,SACtCH,IAAKG,EAAK,MAAUE,KAExB,IAAK,MACH,MAAO,CACLR,KAAMd,YAAO,IAAIX,KAAK+B,EAAK,MAAW,SACtCF,IAAKE,EAAK,MAAUE,KAExB,QACE,OAAO,IAWb,OAPA5B,qBAAU,WACR,IAAM6B,EACJ/B,EAAU,GAAKgC,aAAY,kBAAM/B,EAAWD,EAAU,KAAI,KAE5D,OADAD,EAAQH,YAAQ,IAAIC,MAASG,IACtB,kBAAMiC,cAAcF,MAC1B,CAAC/B,IAGF,yBAAKkC,UAAU,SACb,6BACE,kBAAC,IAAD,CACEC,MAAO,IACPC,OAAQ,IACR1C,KAAMA,EACN2C,OAAQ,CACNC,IAAK,EACLC,OAAQ,EACRC,MAAO,KAGT,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,QAAQ,OAAOC,OAAQ,CAAC,OAAQ,UACvC,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CACEC,KAAK,SACLF,QAAQ,MACRG,OAAO,UACPC,KAAK,EACLC,mBAAmB,IAErB,kBAAC,IAAD,CACEH,KAAK,SACLF,QAAQ,MACRG,OAAO,UACPC,KAAK,EACLC,mBAAmB,KAIvB,yBAAKb,UAAU,SACb,yDACA,oCACA,yCACUc,IAATtD,GACCA,EAAKuD,KAAI,SAAC1B,EAAM2B,GAAP,OACP,kBAAC,IAAMC,SAAP,CAAgBhC,IAAK+B,GACnB,6BAAM3B,EAAKD,MACX,6BAAMC,EAAKE,KACX,6BAAMF,EAAKG,aCnHP0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.395f7f0c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport { format, addDays } from \"date-fns\";\nimport _ from \"lodash\";\n\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [date, setDate] = useState(addDays(new Date(), -90));\n  const [counter, setCounter] = useState(90);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const [responseUSD, responseEUR] = await Promise.all([\n        axios.get(\n          `https://api.exchangeratesapi.io/${format(\n            date,\n            \"yyyy-MM-dd\"\n          )}?base=USD&symbols=RUB`\n        ),\n        axios.get(\n          `https://api.exchangeratesapi.io/${format(\n            date,\n            \"yyyy-MM-dd\"\n          )}?base=EUR&symbols=RUB`\n        ),\n      ]);\n\n      const dataNew = [].concat(\n        convertRates(responseUSD.data),\n        convertRates(responseEUR.data)\n      );\n\n      const grouped = _.groupBy(dataNew, \"time\");\n      for (const [key, value] of Object.entries(grouped)) {\n        const row = { time: key };\n        for (const item of value) {\n          if (Object.keys(item)[1] === \"USD\") {\n            row[Object.keys(item)[1]] = item.USD;\n          }\n          if (Object.keys(item)[1] === \"EUR\") {\n            row[Object.keys(item)[1]] = item.EUR;\n          }\n        }\n        setData([...data, row]);\n      }\n    };\n    fetchData();\n  }, [date]);\n\n  const convertRates = (rates) => {\n    switch (rates.base) {\n      case \"USD\":\n        return {\n          time: format(new Date(rates[\"date\"]), \"dd.MM\"),\n          USD: rates[\"rates\"].RUB,\n        };\n      case \"EUR\":\n        return {\n          time: format(new Date(rates[\"date\"]), \"dd.MM\"),\n          EUR: rates[\"rates\"].RUB,\n        };\n      default:\n        return 0;\n    }\n  };\n\n  useEffect(() => {\n    const timer =\n      counter > 0 && setInterval(() => setCounter(counter - 1), 1000);\n    setDate(addDays(new Date(), -counter));\n    return () => clearInterval(timer);\n  }, [counter]);\n\n  return (\n    <div className=\"chart\">\n      <div>\n        <LineChart\n          width={500}\n          height={300}\n          data={data}\n          margin={{\n            top: 5,\n            bottom: 5,\n            left: -20,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"1 1\" />\n          <XAxis dataKey=\"time\" domain={[\"auto\", \"auto\"]} />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Line\n            type=\"linear\"\n            dataKey=\"EUR\"\n            stroke=\"#8884d8\"\n            dot={false}\n            isAnimationActive={false}\n          />\n          <Line\n            type=\"linear\"\n            dataKey=\"USD\"\n            stroke=\"#82ca9d\"\n            dot={false}\n            isAnimationActive={false}\n          />\n        </LineChart>\n\n        <div className=\"table\">\n          <div>Дата</div>\n          <div>USD</div>\n          <div>EUR</div>\n          {data !== undefined &&\n            data.map((item, i) => (\n              <React.Fragment key={i}>\n                <div>{item.time}</div>\n                <div>{item.USD}</div>\n                <div>{item.EUR}</div>\n              </React.Fragment>\n            ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}